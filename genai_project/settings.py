"""
Django settings for genai_project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-dev-key-only-for-development-123456789')

# Debug mode - False for production
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Allowed hosts for production
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',
    'hackversity-69bt.onrender.com',  # Your specific Render URL
]

# Get allowed hosts from environment variable if provided
if os.getenv('ALLOWED_HOSTS'):
    ALLOWED_HOSTS.extend(os.getenv('ALLOWED_HOSTS').split(','))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.sites',  # Removed to avoid database dependency issues
    
    # Third party apps (optional)
    'rest_framework',
    # 'corsheaders',  # Commented out for minimal setup
    # 'allauth',
    # 'allauth.account',
    # 'allauth.socialaccount',
    
    # Local apps
    'accounts',
    'chat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # For static file serving
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'genai_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'genai_project.wsgi.application'


# Database configuration
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Use PostgreSQL for production (Render.com provides DATABASE_URL)
DATABASE_URL = os.getenv('DATABASE_URL')

# Test database connectivity and fallback to SQLite if PostgreSQL fails
def test_database_connection(db_config):
    """Test if database connection works"""
    try:
        # Check if all required fields are present (PORT is optional, defaults to 5432)
        required_fields = ['HOST', 'USER', 'PASSWORD', 'NAME']
        for field in required_fields:
            if not db_config.get(field):
                print(f"Database connection test failed: Missing {field}")
                return False
        
        # Set default port if missing
        if not db_config.get('PORT'):
            db_config['PORT'] = 5432
            print("Database connection test: Using default PORT 5432")
        
        import psycopg2
        if 'postgresql' in db_config.get('ENGINE', ''):
            conn = psycopg2.connect(
                host=db_config.get('HOST'),
                port=db_config.get('PORT', 5432),
                user=db_config.get('USER'),
                password=db_config.get('PASSWORD'),
                dbname=db_config.get('NAME'),
                connect_timeout=5
            )
            conn.close()
            print(f"Database connection test successful to {db_config.get('HOST')}")
            return True
    except ImportError:
        print("Database connection test failed: psycopg2 not available")
        return False
    except Exception as e:
        print(f"Database connection test failed: {e}")
        return False
    return True

if DATABASE_URL:
    try:
        # Production database (PostgreSQL)
        print(f"Parsing DATABASE_URL...")
        
        # Show URL format (without sensitive data) for debugging
        url_parts = DATABASE_URL.split('@')
        if len(url_parts) > 1:
            host_part = url_parts[1]  # Everything after @
            print(f"Database URL host part: {host_part}")
        
        db_config = dj_database_url.parse(DATABASE_URL)
        print(f"Parsed database config - Engine: {db_config.get('ENGINE', 'Unknown')}")
        print(f"Host: {db_config.get('HOST', 'Not set')}")
        print(f"Port: {db_config.get('PORT', 'Not set')} (will default to 5432 if missing)")
        print(f"Database Name: {db_config.get('NAME', 'Not set')}")
        print(f"User: {db_config.get('USER', 'Not set')}")
        
        # Test connection before using PostgreSQL
        if test_database_connection(db_config):
            DATABASES = {
                'default': db_config
            }
            # Add connection pooling and retry logic for production
            DATABASES['default'].update({
                'CONN_MAX_AGE': 60,  # Reduced from 600 for better connection cycling
                'CONN_HEALTH_CHECKS': True,
                'OPTIONS': {
                    'connect_timeout': 10,
                    'keepalives_idle': 600,
                    'keepalives_interval': 30,
                    'keepalives_count': 3,
                }
            })
            print("‚úÖ Using PostgreSQL database")
        else:
            # Fallback to SQLite if PostgreSQL connection fails
            print("‚ö†Ô∏è  PostgreSQL connection failed, falling back to SQLite")
            print("üìù Note: Data will not persist between deployments with SQLite")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
    except Exception as e:
        print(f"‚ùå Error parsing DATABASE_URL: {e}")
        print("‚ö†Ô∏è  Falling back to SQLite database")
        print("üí° Check that DATABASE_URL is properly formatted")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    # Development database (SQLite)
    print("üìù DATABASE_URL not set, using SQLite for development")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static files directories
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'

# Euron API Configuration
EURON_API_KEY = os.getenv('EURON_API_KEY', 'euri-94dee66c5f9b41981308651c7985cbf1db0ed7307f498e8e70ccc1da7c84c343')

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# Django Authentication Configuration
# SITE_ID = 1  # Removed since we're not using django.contrib.sites

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'allauth.account.auth_backends.AuthenticationBackend',  # Commented out for minimal setup
]

# Authentication settings
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/chat/'
LOGOUT_REDIRECT_URL = '/'

# Allauth settings (commented out for minimal setup)
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_USERNAME_REQUIRED = False
# ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'none'  # Set to 'mandatory' for email verification

# CORS settings (for API access if needed)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

# Production Security Settings
if not DEBUG:
    # HTTPS settings
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Security middleware settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    
    # HSTS settings
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Session and CSRF settings
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Additional security headers
    X_FRAME_OPTIONS = 'DENY'
    
# Logging configuration for production
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}
